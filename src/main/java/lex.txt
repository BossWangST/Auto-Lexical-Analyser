# regular definitions
delim    ( |    )
ws    {delim}{delim}*
letter    (_|q|w|e|r|t|y|u|i|o|p|a|s|d|f|g|h|j|k|l|z|x|c|v|b|n|m|Q|W|E|R|T|Y|U|I|O|P|A|S|D|F|G|H|J|K|L|Z|X|C|V|B|N|M)
digit    (1|2|3|4|5|6|7|8|9|0)
id    {letter}({letter}|{digit})*
int_num    {digit}+
real_num    {digit}+(\.{digit}+)?((e|E)(+|-)?{digit}+)?
string_literal    \".*\"
char_literal    \'.\'


# rules
%%
# white space
{ws}    %%[/* no action and no return*/%%]

# reserved keywords
auto    %%[if(i==0) install(AUTO,line);%%]
else    %%[if(i==1) install(ELSE,line);%%]
long    %%[if(i==2) install(LONG,line);%%]
switch    %%[if(i==3) install(SWITCH,line);%%]
break    %%[if(i==4) install(BREAK,line);%%]
enum    %%[if(i==5) install(ENUM,line);%%]
register    %%[if(i==6) install(REGISTER,line);%%]
typedef    %%[if(i==7) install(TYPEDEF,line);%%]
case    %%[if(i==8) install(CASE,line);%%]
extern    %%[if(i==9) install(EXTERN,line);%%]
return    %%[if(i==10) install(RETURN,line);%%]
union    %%[if(i==11) install(UNION,line);%%]
char    %%[if(i==12) install(CHAR,line);%%]
float    %%[if(i==13) install(FLOAT,line);%%]
short    %%[if(i==14) install(SHORT,line);%%]
unsigned    %%[if(i==15) install(UNSIGNED,line);%%]
const    %%[if(i==16) install(CONST,line);%%]
for    %%[if(i==17) install(FOR,line);%%]
signed    %%[if(i==18) install(SIGNED,line);%%]
void    %%[if(i==19) install(VOID,line);%%]
continue    %%[if(i==20) install(CONTINUE,line);%%]
goto    %%[if(i==21) install(GOTO,line);%%]
sizeof    %%[if(i==22) install(SIZEOF,line);%%]
volatile    %%[if(i==23) install(VOLATILE,line);%%]
volatile    %%[if(i==24) install(VOLATILE,line);%%]
default    %%[if(i==25) install(DEFAULT,line);%%]
if    %%[if(i==26) install(IF,line);%%]
static    %%[if(i==27) install(STATIC,line);%%]
while    %%[if(i==28) install(WHILE,line);%%]
do    %%[if(i==29) install(DO,line);%%]
int    %%[if(i==30) install(INT,line);%%]
struct    %%[if(i==31) install(STRUCT,line);%%]
_packed    %%[if(i==32) install(_PACKED,line);%%]
double    %%[if(i==33) install(DOUBLE,line);%%]

# identifier and number
{id}    %%[if(i==34) installID(ID);%%]
{int_num}    %%[if(i==35) installINT(INT_NUM);%%]
{real_num}    %%[if(i==36) installREAL(REAL_NUM);%%]
{string_literal}    %%[if(i==37) installSTRING(STRING_LITERAL);%%]
{char_literal}    %%[if(i==38) installCHAR(CHAR_LITERAL);%%]

# relational operator
<    %%[if(i==39) installOP(RELOP,LT);%%]
<=    %%[if(i==40) installOP(RELOP,LE);%%]
==    %%[if(i==41) installOP(RELOP,EQ);%%]
!=    %%[if(i==42) installOP(RELOP,NE);%%]
>    %%[if(i==43) installOP(RELOP,GT);%%]
>=    %%[if(i==44) installOP(RELOP,GE);%%]

# arithmetical operator
+    %%[if(i==45) installOP(ARILOP,PLUS);%%]
-    %%[if(i==46) installOP(ARILOP,MINUS);%%]
*    %%[if(i==47) installOP(ARILOP,MULTIPLY);%%]
/    %%[if(i==48) installOP(ARILOP,DIVIDE);%%]
%    %%[if(i==49) installOP(ARILOP,MOD);%%]

# logical operator
&&    %%[if(i==50) installOP(LOGOP,AND);%%]
||    %%[if(i==51) installOP(LOGOP,OR);%%]
!    %%[if(i==52) installOP(LOGOP,NOT);%%]

# bitwise operator
<<    %%[if(i==53) installOP(BITOP,LSHIFT);%%]
>>    %%[if(i==54) installOP(BITOP,RSHIFT);%%]
&    %%[if(i==55) installOP(BITOP,BITAND);%%]
~    %%[if(i==56) installOP(BITOP,BITNOT);%%]
|    %%[if(i==57) installOP(BITOP,BITNOT);%%]
^    %%[if(i==58) installOP(BITOP,BITXOR);%%]

# assign operator
=    %%[if(i==59) installOP(ASSIGNOP,ASSIGN);%%]
+=    %%[if(i==60) installOP(ASSIGNOP,ADDASSIGN);%%]
-=    %%[if(i==61) installOP(ASSIGNOP,MINUSASSIGN);%%]
*=    %%[if(i==62) installOP(ASSIGNOP,MULTIPLYASSIGN);%%]
/=    %%[if(i==63) installOP(ASSIGNOP,DIVIDEASSIGN);%%]
%=    %%[if(i==64) installOP(ASSIGNOP,MODASSIGN);%%]
&=    %%[if(i==65) installOP(ASSIGNOP,ANDASSIGN);%%]
|=    %%[if(i==66) installOP(ASSIGNOP,ORASSIGN);%%]
^=    %%[if(i==67) installOP(ASSIGNOP,XORASSIGN);%%]
<<=    %%[if(i==68) installOP(ASSIGNOP,LSHIFTASSIGN);%%]
>>=    %%[if(i==69) installOP(ASSIGNOP,RSHIFTASSIGN);%%]

# punctuation
(    %%[if(i==70) install(LP);%%]
)    %%[if(i==71) install(RP);%%]
[    %%[if(i==72) install(LSBR);%%]
]    %%[if(i==73) install(RSBR);%%]
{    %%[if(i==74) install(LBR);%%]
}    %%[if(i==75) install(RBR);%%]
,    %%[if(i==76) install(COMMA);%%]
;    %%[if(i==77) install(SEMICOLON);%%]

%%

#reserved words
#No.0-99
final int AUTO = 0;
final int ELSE = 1;
final int LONG = 2;
final int SWITCH = 3;
final int BREAK = 4;
final int ENUM = 5;
final int REGISTER = 6;
final int TYPEDEF = 7;
final int CASE = 8;
final int EXTERN = 9;
final int RETURN = 10;
final int UNION = 11;
final int CHAR = 12;
final int FLOAT = 13;
final int SHORT = 14;
final int UNSIGNED = 15;
final int CONST = 16;
final int FOR = 17;
final int SIGNED = 18;
final int VOID = 19;
final int CONTINUE = 20;
final int GOTO = 21;
final int SIZEOF = 22;
final int VOLATILE = 23;
final int DEFAULT = 24;
final int IF = 25;
final int STATIC = 26;
final int WHILE = 27;
final int DO = 28;
final int INT = 29;
final int STRUCT = 30;
final int _PACKED = 31;
final int DOUBLE = 32;

#identifier
#No.100-199
final int ID = 100;

#constant
#No.200-299
#number
final int INT_NUM = 200;
final int REAL_NUM = 201;
#string char literals
final int STRING_LITERAL = 202;
final int CHAR_LITERAL = 203;


#operator
#No.300-399
#relational operator
final int RELOP = 300;
# <
final int LT = 0;
# <=
final int LE = 1;
# ==
final int EQ = 2;
# !=
final int NE = 3;
# >
final int GT = 4;
# >=
final int GE = 5;

#arithmetical operator
final int ARILOP = 301;
final int PLUS = 0;
final int MINUS = 1;
final int MULTIPLY = 2;
final int DIVIDE = 3;
final int MOD = 4;

#logical operator
final int LOGOP = 302;
final int AND = 0;
final int OR = 1;
final int NOT = 2;

#bitwise operator
final int BITOP = 303;
final int LSHIFT = 0;
final int RSHIFT = 1;
final int BITAND = 2;
final int BITOR = 3;
final int BITNOT = 4;
final int BITXOR = 5;

#assign operator
final int ASSIGNOP = 304;
final int ASSIGN = 1;
final int ADDASSIGN = 2;
final int MINUSASSIGN = 3;
final int MULTIPLYASSIGN = 4;
final int DIVIDEASSIGN = 5;
final int MODASSIGN = 6;
final int ANDASSIGN = 7;
final int ORASSIGN = 8;
final int XORASSIGN = 10;
final int LSHIFTASSIGN = 11;
final int RSHIFTASSIGN = 12;

#punctuation
#No.400-499
#left parenthesis (
final int LP = 400;
#right parenthesis )
final int RP = 401;
#left squared bracket [
final int LSBR = 402;
#right squared bracket ]
final int RSBR = 403;
#left brace {
final int LBR = 404;
#right brace }
final int RBR = 405;
# ,
final int COMMA = 406;
# ;
final int SEMICOLON = 407;

public int install(int type){
    token_sequence.tokens.add(new token(type,line));
}

public int installID(int type) {
    token_sequence.tokens.add(new id_token(type,line,token_value));
}

public int installINT(int type) {
    token_sequence.tokens.add(new int_token(type,line,token_value));
}

public int installREAL(int type) {
    token_sequence.tokens.add(new real_token(type,line,token_value));
}

public int installOP(int type, int op) {
    token_sequence.tokens.add(new op_token(type,line,op));
}

public int installSTRING(int type) {
    token_sequence.tokens.add(new string_token(type,line,token_value));
}

public int installCHAR(int type) {
    token_sequence.tokens.add(new char_token(type,line,token_value));
}
