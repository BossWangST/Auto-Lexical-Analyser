# regular definitions
delim    ( |    )
ws    {{delim}}{{delim}}*
letter    (_|q|w|e|r|t|y|u|i|o|p|a|s|d|f|g|h|j|k|l|z|x|c|v|b|n|m|Q|W|E|R|T|Y|U|I|O|P|A|S|D|F|G|H|J|K|L|Z|X|C|V|B|N|M)
digit    (1|2|3|4|5|6|7|8|9|0)
id    {{letter}}({{letter}}|{{digit}})*
#real_num    {{digit}}{{digit}}*(.{{digit}}{{digit}}*)(((e|E)((+|-)|){{digit}}{{digit}}*)|)
int_num    {{digit}}{{digit}}*
real_num    (({{digit}}{{digit}}*(.{{digit}}{{digit}}*))|({{digit}}{{digit}}*(((e|E)((+|-)|){{digit}}{{digit}}*)))|({{digit}}{{digit}}*(.{{digit}}{{digit}}*)(((e|E)((+|-)|){{digit}}{{digit}}*))))
symbol    (~|!|@|#|$|%|^|&|*|\\(|\\)|_|+|-|=|,|.|<|>|?|/|[|]|:|;|\\{|\\}|\\\)
any_char    ({{ws}}|{{letter}}|{{digit}}|{{symbol}})
string_literal    \\"{{any_char}}*\\"
char_literal    \\'{{any_char}}\\'


# rules
%%
# white space
{{ws}}    %%[if(i==0) break;/* no action and no return*/%%]

# reserved keywords
auto    %%[else if((i-1)==0) {token_sequence.tokens.add(new token(AUTO,line));break;}%%]
else    %%[else if((i-1)==1) {token_sequence.tokens.add(new token(ELSE,line));break;}%%]
long    %%[else if((i-1)==2) {token_sequence.tokens.add(new token(LONG,line));break;}%%]
switch    %%[else if((i-1)==3) {token_sequence.tokens.add(new token(SWITCH,line));break;}%%]
break    %%[else if((i-1)==4) {token_sequence.tokens.add(new token(BREAK,line));break;}%%]
enum    %%[else if((i-1)==5) {token_sequence.tokens.add(new token(ENUM,line));break;}%%]
register    %%[else if((i-1)==6) {token_sequence.tokens.add(new token(REGISTER,line));break;}%%]
typedef    %%[else if((i-1)==7) {token_sequence.tokens.add(new token(TYPEDEF,line));break;}%%]
case    %%[else if((i-1)==8) {token_sequence.tokens.add(new token(CASE,line));break;}%%]
extern    %%[else if((i-1)==9) {token_sequence.tokens.add(new token(EXTERN,line));break;}%%]
return    %%[else if((i-1)==10) {token_sequence.tokens.add(new token(RETURN,line));break;}%%]
union    %%[else if((i-1)==11) {token_sequence.tokens.add(new token(UNION,line));break;}%%]
char    %%[else if((i-1)==12) {token_sequence.tokens.add(new token(CHAR,line));break;}%%]
float    %%[else if((i-1)==13) {token_sequence.tokens.add(new token(FLOAT,line));break;}%%]
short    %%[else if((i-1)==14) {token_sequence.tokens.add(new token(SHORT,line));break;}%%]
unsigned    %%[else if((i-1)==15) {token_sequence.tokens.add(new token(UNSIGNED,line));break;}%%]
const    %%[else if((i-1)==16) {token_sequence.tokens.add(new token(CONST,line));break;}%%]
for    %%[else if((i-1)==17) {token_sequence.tokens.add(new token(FOR,line));break;}%%]
signed    %%[else if((i-1)==18) {token_sequence.tokens.add(new token(SIGNED,line));break;}%%]
void    %%[else if((i-1)==19) {token_sequence.tokens.add(new token(VOID,line));break;}%%]
continue    %%[else if((i-1)==20) {token_sequence.tokens.add(new token(CONTINUE,line));break;}%%]
goto    %%[else if((i-1)==21) {token_sequence.tokens.add(new token(GOTO,line));break;}%%]
sizeof    %%[else if((i-1)==22) {token_sequence.tokens.add(new token(SIZEOF,line));break;}%%]
volatile    %%[else if((i-1)==23) {token_sequence.tokens.add(new token(VOLATILE,line));break;}%%]
volatile    %%[else if((i-1)==24) {token_sequence.tokens.add(new token(VOLATILE,line));break;}%%]
default    %%[else if((i-1)==25) {token_sequence.tokens.add(new token(DEFAULT,line));break;}%%]
if    %%[else if((i-1)==26) {token_sequence.tokens.add(new token(IF,line));break;}%%]
static    %%[else if((i-1)==27) {token_sequence.tokens.add(new token(STATIC,line));break;}%%]
while    %%[else if((i-1)==28) {token_sequence.tokens.add(new token(WHILE,line));break;}%%]
double    %%[else if((i-1)==29) {token_sequence.tokens.add(new token(DOUBLE,line));break;}%%]
int    %%[else if((i-1)==30) {token_sequence.tokens.add(new token(INT,line));break;}%%]
struct    %%[else if((i-1)==31) {token_sequence.tokens.add(new token(STRUCT,line));break;}%%]
_packed    %%[else if((i-1)==32) {token_sequence.tokens.add(new token(_PACKED,line));break;}%%]
do    %%[else if((i-1)==33) {token_sequence.tokens.add(new token(DO,line));break;}%%]

# identifier and number
{{id}}    %%[else if((i-1)==34) {token_sequence.tokens.add(new id_token(ID,line,token_value));break;}%%]
#note here: real_num should be placed in front of int_num, or token will be int_num always.
{{real_num}}    %%[else if((i-1)==35) {token_sequence.tokens.add(new real_token(REAL_NUM,line,token_value));break;}%%]
{{int_num}}    %%[else if((i-1)==36) {token_sequence.tokens.add(new int_token(INT_NUM,line,token_value));break;}%%]
{{string_literal}}    %%[else if((i-1)==37) {token_sequence.tokens.add(new string_token(STRING_LITERAL,line,token_value));break;}%%]
{{char_literal}}    %%[else if((i-1)==38) {token_sequence.tokens.add(new char_token(CHAR_LITERAL,line,token_value));break;}%%]

# relational operator
#token_sequence.tokens.add(new op_token(type,line,op));
<    %%[else if((i-1)==39) {token_sequence.tokens.add(new op_token(RELOP,line,LT));break;}%%]
<=    %%[else if((i-1)==40) {token_sequence.tokens.add(new op_token(RELOP,line,LE));break;}%%]
==    %%[else if((i-1)==41) {token_sequence.tokens.add(new op_token(RELOP,line,EQ));break;}%%]
!=    %%[else if((i-1)==42) {token_sequence.tokens.add(new op_token(RELOP,line,NE));break;}%%]
>    %%[else if((i-1)==43) {token_sequence.tokens.add(new op_token(RELOP,line,GT));break;}%%]
>=    %%[else if((i-1)==44) {token_sequence.tokens.add(new op_token(RELOP,line,GE));break;}%%]

# arithmetical operator
+    %%[else if((i-1)==45) {token_sequence.tokens.add(new op_token(ARIOP,line,PLUS));break;}%%]
-    %%[else if((i-1)==46) {token_sequence.tokens.add(new op_token(ARIOP,line,MINUS));break;}%%]
\\*    %%[else if((i-1)==47) {token_sequence.tokens.add(new op_token(ARIOP,line,MULTIPLY));break;}%%]
/    %%[else if((i-1)==48) {token_sequence.tokens.add(new op_token(ARIOP,line,DIVIDE));break;}%%]
%    %%[else if((i-1)==49) {token_sequence.tokens.add(new op_token(ARIOP,line,MOD));break;}%%]

# logical operator
&&    %%[else if((i-1)==50) {token_sequence.tokens.add(new op_token(LOGOP,line,AND));break;}%%]
\\|\\|    %%[else if((i-1)==51) {token_sequence.tokens.add(new op_token(LOGOP,line,OR));break;}%%]
!    %%[else if((i-1)==52) {token_sequence.tokens.add(new op_token(LOGOP,line,NOT));break;}%%]

# bitwise operator
<<    %%[else if((i-1)==53) {token_sequence.tokens.add(new op_token(BITOP,line,LSHIFT));break;}%%]
>>    %%[else if((i-1)==54) {token_sequence.tokens.add(new op_token(BITOP,line,RSHIFT));break;}%%]
&    %%[else if((i-1)==55) {token_sequence.tokens.add(new op_token(BITOP,line,BITAND));break;}%%]
~    %%[else if((i-1)==56) {token_sequence.tokens.add(new op_token(BITOP,line,BITNOT));break;}%%]
\\|    %%[else if((i-1)==57) {token_sequence.tokens.add(new op_token(BITOP,line,BITNOT));break;}%%]
^    %%[else if((i-1)==58) {token_sequence.tokens.add(new op_token(BITOP,line,BITXOR));break;}%%]

# assign operator
=    %%[else if((i-1)==59) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,ASSIGN));break;}%%]
+=    %%[else if((i-1)==60) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,ADDASSIGN));break;}%%]
-=    %%[else if((i-1)==61) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,MINUSASSIGN));break;}%%]
\\*=    %%[else if((i-1)==62) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,MULTIPLYASSIGN));break;}%%]
/=    %%[else if((i-1)==63) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,DIVIDEASSIGN));break;}%%]
%=    %%[else if((i-1)==64) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,MODASSIGN));break;}%%]
&=    %%[else if((i-1)==65) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,ANDASSIGN));break;}%%]
\\|=    %%[else if((i-1)==66) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,ORASSIGN));break;}%%]
^=    %%[else if((i-1)==67) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,XORASSIGN));break;}%%]
<<=    %%[else if((i-1)==68) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,LSHIFTASSIGN));break;}%%]
>>=    %%[else if((i-1)==69) {token_sequence.tokens.add(new op_token(ASSIGNOP,line,RSHIFTASSIGN));break;}%%]

# punctuation
\\(    %%[else if((i-1)==70) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,LP));break;}%%]
\\)    %%[else if((i-1)==71) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,RP));break;}%%]
[    %%[else if((i-1)==72) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,LSBR));break;}%%]
]    %%[else if((i-1)==73) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,RSBR));break;}%%]
{    %%[else if((i-1)==74) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,LBR));break;}%%]
}    %%[else if((i-1)==75) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,RBR));break;}%%]
,    %%[else if((i-1)==76) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,COMMA));break;}%%]
;    %%[else if((i-1)==77) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,SEMICOLON));break;}%%]
\\#    %%[else if((i-1)==78) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,MACRO));break;}%%]
.    %%[else if((i-1)==79) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,DOT));break;}%%]
:    %%[else if((i-1)==80) {token_sequence.tokens.add(new op_token(PUNCTUATION,line,COLON));break;}%%]
%%

#reserved words
#No.0-99
final int AUTO = 0;
final int ELSE = 1;
final int LONG = 2;
final int SWITCH = 3;
final int BREAK = 4;
final int ENUM = 5;
final int REGISTER = 6;
final int TYPEDEF = 7;
final int CASE = 8;
final int EXTERN = 9;
final int RETURN = 10;
final int UNION = 11;
final int CHAR = 12;
final int FLOAT = 13;
final int SHORT = 14;
final int UNSIGNED = 15;
final int CONST = 16;
final int FOR = 17;
final int SIGNED = 18;
final int VOID = 19;
final int CONTINUE = 20;
final int GOTO = 21;
final int SIZEOF = 22;
final int VOLATILE = 23;
final int DEFAULT = 24;
final int IF = 25;
final int STATIC = 26;
final int WHILE = 27;
final int DOUBLE = 28;
final int INT = 29;
final int STRUCT = 30;
final int _PACKED = 31;
final int DO = 32;

#identifier
#No.100-199
final int ID = 100;

#constant
#No.200-299
#number
final int INT_NUM = 200;
final int REAL_NUM = 201;
#string char literals
final int STRING_LITERAL = 202;
final int CHAR_LITERAL = 203;


#operator
#No.300-399
#relational operator
final int RELOP = 300;
# <
final int LT = 0;
# <=
final int LE = 1;
# ==
final int EQ = 2;
# !=
final int NE = 3;
# >
final int GT = 4;
# >=
final int GE = 5;

#arithmetical operator
final int ARIOP = 306;
final int PLUS = 0;
final int MINUS = 1;
final int MULTIPLY = 2;
final int DIVIDE = 3;
final int MOD = 4;

#logical operator
final int LOGOP = 311;
final int AND = 0;
final int OR = 1;
final int NOT = 2;

#bitwise operator
final int BITOP = 314;
final int LSHIFT = 0;
final int RSHIFT = 1;
final int BITAND = 2;
final int BITOR = 3;
final int BITNOT = 4;
final int BITXOR = 5;

#assign operator
final int ASSIGNOP = 320;
final int ASSIGN = 1;
final int ADDASSIGN = 2;
final int MINUSASSIGN = 3;
final int MULTIPLYASSIGN = 4;
final int DIVIDEASSIGN = 5;
final int MODASSIGN = 6;
final int ANDASSIGN = 7;
final int ORASSIGN = 8;
final int XORASSIGN = 10;
final int LSHIFTASSIGN = 11;
final int RSHIFTASSIGN = 12;

#punctuation
#No.400-499
#left parenthesis (
final int PUNCTUATION=400;
final int LP = 0;
#right parenthesis )
final int RP = 1;
#left squared bracket [
final int LSBR = 2;
#right squared bracket ]
final int RSBR = 3;
#left brace {
final int LBR = 4;
#right brace }
final int RBR = 5;
# ,
final int COMMA = 6;
# ;
final int SEMICOLON = 7;
# #
final int MACRO = 8;
# .
final int DOT = 9;
# :
final int COLON = 10;

#public int install(int type,int line,Token_Sequence token_sequence){
#    token_sequence.tokens.add(new token(type,line));
#}
#
#public int installID(int type,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new id_token(type,line,token_value));
#}
#
#public int installINT(int type,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new int_token(type,line,token_value));
#}
#
#public int installREAL(int type,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new real_token(type,line,token_value));
#}
#
#public int installOP(int type, int op,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new op_token(type,line,op));
#}
#
#public int installSTRING(int type,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new string_token(type,line,token_value));
#}
#
#public int installCHAR(int type,int line,Token_Sequence token_sequence) {
#    token_sequence.tokens.add(new char_token(type,line,token_value));
#}
